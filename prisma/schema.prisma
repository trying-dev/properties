generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

// ========================================
// MAIN PROPERTY MODEL
// ========================================

model Property {
    id      String  @id @default(cuid()) // Cambio a cuid() para mejor performance
    adminId String?

    // Basic info that could be nullable initially
    name        String?
    description String?
    status      PropertyStatus @default(ACTIVE)

    // Address
    streetAndNumber String
    neighborhood    String
    city            String
    state           String
    postalCode      String
    gpsCoordinates  String? // Format: "lat,lng"
    country         String  @default("Colombia") // Agregado para internacionalización

    // Features
    propertyType  PropertyType
    totalLandArea Float? // En m²
    builtArea     Float // En m²
    floors        Int          @default(1)
    age           Int // Años desde construcción

    // Exterior
    yardOrGarden         String?
    parking              Int     @default(0)
    parkingLocation      String?
    balconiesAndTerraces String?
    recreationalAreas    String?

    // Relations
    admin         Admin?         @relation(fields: [adminId], references: [id], onDelete: SetNull)
    economy       Economy?
    legal         Legal?
    units         Unit[]
    insurances    Insurance[]
    services      Service[]
    architectures Architecture[]
    equipments    Equipment[]
    notifications Notification[]
    settings      Setting[]

    // Control de Acceso
    accessControls AccessControl[]
    visitorLogs    VisitorLog[]
    keyManagement  KeyManagement[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("properties")
}

enum PropertyStatus {
    ACTIVE
    INACTIVE
    MAINTENANCE
    SOLD
}

enum PropertyType {
    HOUSE
    APARTMENT
    COMMERCIAL_SPACE
    OFFICE
    WAREHOUSE
    LAND
    MIXED_USE
}

// ========================================
// USER MANAGEMENT
// ========================================

model User {
    id        String     @id @default(cuid())
    name      String
    lastName  String
    email     String     @unique
    phone     String?
    birthDate DateTime?
    address   String?
    status    UserStatus @default(ACTIVE)

    // One-to-one relations with role models
    owner     Owner?
    tenant    Tenant?
    subTenant SubTenant?
    worker    Worker?
    admin     Admin?

    // Sistema de Comunicación
    sentMessages     Message[]       @relation("SentMessages")
    receivedMessages Message[]       @relation("ReceivedMessages")
    authorizedVisits VisitorLog[]    @relation("AuthorizedBy")
    assignedKeys     KeyManagement[] @relation("AssignedTo")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

enum UserStatus {
    ACTIVE
    INACTIVE
    SUSPENDED
}

model Admin {
    id         String     @id @default(cuid())
    userId     String     @unique
    adminLevel AdminLevel @default(STANDARD)

    // Relations
    user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
    properties  Property[]
    permissions AdminPermission[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("admins")
}

enum AdminLevel {
    SUPER_ADMIN
    MANAGER
    STANDARD
    LIMITED
}

// Opción alternativa: Modelo intermedio para permissions
model AdminPermission {
    id         String     @id @default(cuid())
    adminId    String
    permission Permission

    // Relations
    admin Admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

    @@unique([adminId, permission]) // Un admin no puede tener el mismo permiso duplicado
    @@map("admin_permissions")
}

enum Permission {
    FULL_ACCESS
    READ_ONLY
    PROPERTY_MANAGEMENT
    FINANCIAL_MANAGEMENT
    MAINTENANCE_MANAGEMENT
    USER_MANAGEMENT
}

model Owner {
    id      String @id @default(cuid()) // Cambio de Int a String para consistencia
    userId  String @unique
    legalId String

    // Relations
    user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
    legal Legal @relation(fields: [legalId], references: [id])

    @@map("owners")
}

model Tenant {
    id     String       @id @default(cuid())
    userId String       @unique
    status TenantStatus @default(ACTIVE)

    // Relations
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    transactions Transaction[]
    insurances   Insurance[]
    contracts    Contract[]

    @@map("tenants")
}

enum TenantStatus {
    ACTIVE
    INACTIVE
    PENDING_APPROVAL
    TERMINATED
}

model SubTenant {
    id     String @id @default(cuid())
    userId String @unique

    // Relations
    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    contracts Contract[]

    @@map("sub_tenants")
}

model Worker {
    id             String     @id @default(cuid())
    userId         String     @unique
    specialty      WorkerType
    certifications String? // JSON string para múltiples certificaciones
    availability   String? // JSON string para horarios
    hourlyRate     Float?

    // Relations
    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    maintenances Maintenance[]

    @@map("workers")
}

enum WorkerType {
    ELECTRICIAN
    PLUMBER
    PAINTER
    CARPENTER
    GENERAL_MAINTENANCE
    HVAC_TECHNICIAN
    LOCKSMITH
    GARDENER
    CLEANER
    HANDYMAN
}

// ========================================
// UNITS AND CONTRACTS
// ========================================

model Unit {
    id              String   @id @default(cuid())
    propertyId      String?
    unitType        UnitType
    unitNumber      String
    isAvailable     Boolean  @default(true)
    area            Float? // Área de la unidad en m²
    rent            Float? // Precio de alquiler
    description     String?
    bedrooms        Int      @default(0)
    bathrooms       Int      @default(0)
    halfBathrooms   Int?     @default(0)
    kitchen         String?
    livingAndDining String?
    additionalRooms String?

    // Relations
    property   Property?       @relation(fields: [propertyId], references: [id], onDelete: SetNull)
    contracts  Contract[]
    keys       KeyManagement[] @relation("UnitKeys")
    VisitorLog VisitorLog[]

    @@unique([propertyId, unitNumber]) // No puede haber dos unidades con el mismo número en la misma propiedad
    @@map("units")
}

enum UnitType {
    FLOOR
    ROOM
    OFFICE
    APARTMENT
    COMMERCIAL_UNIT
    LOCAL
    COMMON_AREA
    PARKING_SPOT
    STORAGE
}

model Contract {
    id                     String       @id @default(cuid())
    unitId                 String
    contractType           ContractType
    contractName           String
    startDate              DateTime // Fecha de inicio
    endDate                DateTime // Fecha de fin
    monthlyRent            Float
    deposit                Float        @default(0)
    isActive               Boolean      @default(true)
    tenantResponsibilities Json? // Array de responsabilidades
    ownerResponsibilities  Json? // Array de responsabilidades
    pets                   Json? // Información sobre mascotas permitidas
    documentLink           String?

    // Relations
    unit       Unit        @relation(fields: [unitId], references: [id], onDelete: Cascade)
    tenants    Tenant[]
    subTenants SubTenant[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("contracts")
}

enum ContractType {
    RENTAL
    LEASE
    COMMERCIAL_LEASE
    SHORT_TERM_RENTAL
    SUBLEASE
}

// ========================================
// LEGAL INFORMATION
// ========================================

model Legal {
    id         String @id @default(cuid())
    propertyId String @unique

    // Relations
    property              Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    titleDocuments        TitleDocument[]
    owners                Owner[]
    usages                Usage[]
    legalHistories        LegalHistory[]
    fiscalDetails         FiscalDetail[]
    policiesAndWarranties PolicyAndWarranty[]
    regulationsAndNorms   RegulationAndNorm[]

    @@map("legal_information")
}

model TitleDocument {
    id             String   @id @default(cuid()) // Cambio de Int a String
    legalId        String
    deedNumber     String   @unique // Unique constraint para evitar duplicados
    notary         String
    deedDate       DateTime
    publicRegistry String
    documentLink   String? // Puede ser null inicialmente
    isCurrent      Boolean  @default(false)

    // Relations
    legal Legal @relation(fields: [legalId], references: [id], onDelete: Cascade)

    @@map("title_documents")
}

model Usage {
    id                 String  @id @default(cuid()) // Cambio de Int a String
    legalId            String
    zoning             Zoning
    usageRestrictions  String?
    permitsAndLicenses Json? // Array de permisos
    zoningHistory      Json? // Historial de cambios de zonificación
    documentLink       String?

    // Relations
    legal Legal @relation(fields: [legalId], references: [id], onDelete: Cascade)

    @@map("property_usage")
}

enum Zoning {
    RESIDENTIAL
    COMMERCIAL
    INDUSTRIAL
    MIXED_USE
    AGRICULTURAL
    RECREATIONAL
}

model LegalHistory {
    id               String  @id @default(cuid()) // Cambio de Int a String
    legalId          String
    ownershipChanges Json? // Array de cambios de propietario
    mortgagesOrLiens Json? // Array de hipotecas o gravámenes
    legalDisputes    Json? // Array de disputas legales
    auctionHistory   Json? // Historial de subastas
    documentLink     String?

    // Relations
    legal Legal @relation(fields: [legalId], references: [id], onDelete: Cascade)

    @@map("legal_history")
}

model FiscalDetail {
    id                   String  @id @default(cuid()) // Cambio de Int a String
    legalId              String
    propertyTax          String
    cadastralValue       Float? // Valor catastral
    specialTaxesOrFees   Json? // Array de impuestos especiales
    debtFreeCertificates Boolean @default(false)
    documentLink         String?

    // Relations
    legal Legal @relation(fields: [legalId], references: [id], onDelete: Cascade)

    @@map("fiscal_details")
}

model PolicyAndWarranty {
    id                    String  @id @default(cuid()) // Cambio de Int a String
    legalId               String
    constructionWarranty  Json? // Detalles de garantía de construcción
    equipmentWarranties   Json? // Garantías de equipos
    structuralSafetyCerts Boolean @default(false)
    documentLink          String?

    // Relations
    legal Legal @relation(fields: [legalId], references: [id], onDelete: Cascade)

    @@map("policies_and_warranties")
}

model RegulationAndNorm {
    id                   String  @id @default(cuid()) // Cambio de Int a String
    legalId              String
    internalRegulations  Json? // Reglamentos internos
    localNorms           Json? // Normas locales
    environmentalPermits Json? // Permisos ambientales
    documentLink         String?

    // Relations
    legal Legal @relation(fields: [legalId], references: [id], onDelete: Cascade)

    @@map("regulations_and_norms")
}

// ========================================
// INSURANCE AND CLAIMS
// ========================================

model Insurance {
    id               String        @id @default(cuid()) // Cambio de Int a String
    propertyId       String
    tenantId         String?
    insuranceType    InsuranceType
    insuranceCompany String
    policyNumber     String        @unique // Unique constraint
    startDate        DateTime
    expirationDate   DateTime
    insuredAmount    Float
    premiumCost      Float

    // Cobertura y exclusiones
    mainCoverage          Json // Array de coberturas principales
    thirdPartyCoverage    String?
    equipmentCoverage     Json? // Array de equipos cubiertos
    coverageExclusions    Json? // Array de exclusiones
    applicableDeductibles Float?

    // Información de contacto de emergencia
    emergencyContact      String?
    insuranceAgentName    String?
    insuranceAgentContact String?
    claimProcedures       Json? // Procedimientos de reclamo

    // Renovación y condiciones especiales
    renewalConditions String?
    coverageReviews   Json? // Revisiones de cobertura
    specialClauses    Json? // Cláusulas especiales
    status            InsuranceStatus @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property      Property        @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    tenant        Tenant?         @relation(fields: [tenantId], references: [id], onDelete: SetNull)
    propertyClaim PropertyClaim[]
    services      Service[]

    @@map("insurances")
}

enum InsuranceType {
    HOME_INSURANCE
    FIRE_INSURANCE
    DISASTER_INSURANCE
    LIABILITY_INSURANCE
    EARTHQUAKE_INSURANCE
    FLOOD_INSURANCE
    THEFT_INSURANCE
}

enum InsuranceStatus {
    ACTIVE
    EXPIRED
    CANCELLED
    PENDING_RENEWAL
}

model PropertyClaim {
    id                String      @id @default(cuid()) // Cambio de Int a String
    insuranceId       String
    claimDate         DateTime    @default(now())
    claimReason       String
    claimStatus       ClaimStatus @default(PENDING)
    indemnifiedAmount Float?
    claimNotes        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    insurance Insurance @relation(fields: [insuranceId], references: [id], onDelete: Cascade)

    @@map("property_claims")
}

enum ClaimStatus {
    PENDING
    IN_PROCESS
    APPROVED
    REJECTED
    PAID
}

// ========================================
// SERVICES AND PAYMENTS
// ========================================

model Service {
    id                     String                @id @default(cuid())
    propertyId             String
    serviceType            ServiceType
    provider               String
    accountNumber          String                @unique // Unique constraint
    paymentResponsible     PaymentResponsibility
    emergencyNumber        String
    supportContactName     String
    supportContactPhone    String
    supportContactEmail    String?
    supportHours           String
    disconnectionClause    String?
    contractConditions     Json? // Condiciones del contrato
    sharedResponsibilities Json? // Responsabilidades compartidas
    propertyInsuranceId    String?
    status                 ServiceStatus         @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property          Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyInsurance Insurance?        @relation(fields: [propertyInsuranceId], references: [id], onDelete: SetNull)
    incidents         IncidentService[]
    servicePayments   ServicePayment[]

    @@map("services")
}

enum ServiceType {
    WATER
    ELECTRICITY
    GAS
    INTERNET
    CABLE_TV
    PHONE
    GARBAGE_COLLECTION
    SECURITY
    CLEANING
    MAINTENANCE
}

enum PaymentResponsibility {
    TENANT
    OWNER
    SHARED
}

enum ServiceStatus {
    ACTIVE
    DISCONNECTED
    SUSPENDED
    CANCELLED
}

model IncidentService {
    id                  String         @id @default(cuid()) // Cambio de Int a String
    serviceId           String
    incidentDate        DateTime       @default(now())
    incidentDescription String
    actionsTaken        String
    compensation        Float?         @default(0)
    compensationNotes   String?
    status              IncidentStatus @default(REPORTED)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@map("service_incidents")
}

enum IncidentStatus {
    REPORTED
    IN_PROGRESS
    RESOLVED
    CLOSED
}

model ServicePayment {
    id                 String        @id @default(cuid())
    serviceId          String
    dueDate            DateTime
    paymentStatus      PaymentStatus @default(PENDING)
    averageAmount      Float?
    paymentDate        DateTime? // Nullable hasta que se pague
    amount             Float
    paymentNotes       String?
    measurementMethod  String?
    readingDate        DateTime?
    readingValue       Float?
    readingNotes       String?
    averageConsumption Float?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

    @@map("service_payments")
}

enum PaymentStatus {
    PENDING
    PAID
    OVERDUE
    CANCELLED
}

// ========================================
// ARCHITECTURE AND EQUIPMENT
// ========================================

model Architecture {
    id             String           @id @default(cuid())
    propertyId     String
    parentId       String? // Para modelar sub-elementos
    name           String
    description    String?
    type           ArchitectureType
    mapCoordinates String? // Coordenadas para localización en mapa
    areaDimensions String? // Dimensiones del área
    condition      Condition        @default(GOOD)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property     Property       @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    parent       Architecture?  @relation("ArchitectureParentChild", fields: [parentId], references: [id])
    subelements  Architecture[] @relation("ArchitectureParentChild")
    maintenances Maintenance[]

    @@map("architecture_elements")
}

enum ArchitectureType {
    WALL
    FLOOR
    CEILING
    ROOF
    DOOR
    WINDOW
    STAIRS
    BALCONY
    GARDEN
    POOL
    GARAGE
    FENCE
    FOUNDATION
}

enum Condition {
    EXCELLENT
    GOOD
    FAIR
    POOR
    CRITICAL
}

model Equipment {
    id                   String          @id @default(cuid())
    propertyId           String
    name                 String
    type                 EquipmentType
    brand                String?
    model                String?
    serialNumber         String?         @unique // Unique constraint si existe
    purchaseDate         DateTime?
    warrantyExpiryDate   DateTime?
    maintenanceFrequency String
    lastMaintenanceDate  DateTime?
    nextMaintenanceDate  DateTime?
    maintenanceCost      Float?
    mapCoordinates       String?
    condition            Condition       @default(GOOD)
    status               EquipmentStatus @default(OPERATIONAL)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    maintenances Maintenance[]

    @@map("equipment")
}

enum EquipmentType {
    HVAC
    WATER_HEATER
    REFRIGERATOR
    WASHING_MACHINE
    DISHWASHER
    OVEN
    MICROWAVE
    AIR_CONDITIONER
    ELEVATOR
    SECURITY_SYSTEM
    FIRE_EXTINGUISHER
    SMOKE_DETECTOR
    WATER_PUMP
    GENERATOR
}

enum EquipmentStatus {
    OPERATIONAL
    OUT_OF_ORDER
    UNDER_MAINTENANCE
    RETIRED
}

// ========================================
// MAINTENANCE
// ========================================

model Maintenance {
    id                  String                @id @default(cuid())
    architectureId      String?
    equipmentId         String?
    workerId            String?
    category            MaintenanceCategory
    type                MaintenanceType
    priority            Priority              @default(MEDIUM)
    description         String
    maintenanceDate     DateTime
    nextMaintenanceDate DateTime?
    costResponsible     PaymentResponsibility
    estimatedCost       Float?
    actualCost          Float?
    warranty            String?
    status              MaintenanceStatus     @default(PENDING)
    observations        String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    architecture Architecture? @relation(fields: [architectureId], references: [id], onDelete: SetNull)
    equipment    Equipment?    @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
    worker       Worker?       @relation(fields: [workerId], references: [id], onDelete: SetNull)
    transactions Transaction[]

    @@map("maintenances")
}

enum MaintenanceCategory {
    ARCHITECTURE
    EQUIPMENT
}

enum MaintenanceType {
    PREVENTIVE
    CORRECTIVE
    REQUEST
    EMERGENCY
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    CRITICAL
}

enum MaintenanceStatus {
    PENDING
    SCHEDULED
    IN_PROGRESS
    COMPLETED
    CANCELLED
    ON_HOLD
}

// ========================================
// ECONOMY AND TRANSACTIONS
// ========================================

model Economy {
    id               String @id @default(cuid())
    propertyId       String @unique
    annualBudget     Float  @default(0)
    accumulatedCosts Float  @default(0)
    costDistribution Json? // Reglas de distribución de costos

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property     Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    transactions Transaction[]

    @@map("property_economy")
}

model Transaction {
    id            String               @id @default(cuid())
    economyId     String
    maintenanceId String?
    tenantId      String?
    type          TransactionType
    description   String
    amount        Float
    date          DateTime             @default(now())
    category      TransactionCategory?
    paymentMethod PaymentMethod?
    receipt       String? // Link al comprobante
    status        TransactionStatus    @default(COMPLETED)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    economy            Economy      @relation(fields: [economyId], references: [id], onDelete: Cascade)
    relatedMaintenance Maintenance? @relation(fields: [maintenanceId], references: [id], onDelete: SetNull)
    tenant             Tenant?      @relation(fields: [tenantId], references: [id], onDelete: SetNull)

    @@map("transactions")
}

enum TransactionType {
    EXPENSE
    INCOME
}

enum TransactionCategory {
    MAINTENANCE
    IMPROVEMENT
    LEGAL
    INSURANCE
    UTILITIES
    RENT
    DEPOSIT
    TAX
    OTHER
}

enum PaymentMethod {
    CASH
    BANK_TRANSFER
    CREDIT_CARD
    DEBIT_CARD
    CHECK
    DIGITAL_WALLET
}

enum TransactionStatus {
    PENDING
    COMPLETED
    CANCELLED
    REFUNDED
}

// ========================================
// NOTIFICATIONS AND SETTINGS
// ========================================

model Notification {
    id         String             @id @default(cuid())
    propertyId String
    title      String
    content    String
    type       NotificationType
    priority   Priority           @default(MEDIUM)
    medium     NotificationMedium @default(EMAIL)
    startDate  DateTime           @default(now())
    endDate    DateTime?
    isRead     Boolean            @default(false)
    status     NotificationStatus @default(ACTIVE)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

    @@map("notifications")
}

enum NotificationType {
    MAINTENANCE_DUE
    PAYMENT_DUE
    CONTRACT_EXPIRY
    INSURANCE_EXPIRY
    EMERGENCY
    GENERAL
    SYSTEM
}

enum NotificationMedium {
    EMAIL
    SMS
    PUSH
    IN_APP
}

enum NotificationStatus {
    ACTIVE
    SENT
    EXPIRED
    CANCELLED
}

model Setting {
    id           String      @id @default(cuid())
    propertyId   String
    type         SettingType
    settingsJson Json // Datos de configuración

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

    @@unique([propertyId, type]) // Solo una configuración por tipo por propiedad
    @@map("settings")
}

enum SettingType {
    NOTIFICATION_PREFERENCES
    ACCESS_CONTROL
    MAINTENANCE_SCHEDULE
    PAYMENT_REMINDERS
    BACKUP_SETTINGS
    PRIVACY_SETTINGS
}

// ========================================
// CONTROL DE ACCESO Y SEGURIDAD
// ========================================

model AccessControl {
    id         String @id @default(cuid())
    propertyId String

    // Configuración general de seguridad
    securityLevel      SecurityLevel @default(MEDIUM)
    accessHours        Json? // Horarios de acceso permitidos
    emergencyProtocols Json? // Protocolos de emergencia
    securityLogs       Json? // Logs de eventos de seguridad

    // Configuración de llaves
    keyManagementRules Json? // Reglas para gestión de llaves

    // Configuración de visitantes
    visitorPolicy     Json? // Políticas para visitantes
    maxVisitorsPerDay Int?    @default(10)
    requiresApproval  Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

    @@map("access_controls")
}

enum SecurityLevel {
    LOW
    MEDIUM
    HIGH
    MAXIMUM
}

model VisitorLog {
    id           String  @id @default(cuid())
    propertyId   String
    unitId       String?
    authorizedBy String // ID del usuario que autorizó

    // Información del visitante
    visitorName      String
    visitorPhone     String?
    visitorId        String? // Cédula o documento de identidad
    purpose          String
    expectedDuration String? // Duración esperada de la visita

    // Control de tiempos
    entryTime      DateTime  @default(now())
    exitTime       DateTime?
    actualDuration String? // Duración real calculada

    // Estado y observaciones
    status       VisitorStatus @default(PENDING)
    observations String?
    photoUrl     String? // URL de foto del visitante (opcional)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    unit       Unit?    @relation(fields: [unitId], references: [id], onDelete: SetNull)
    authorizer User     @relation("AuthorizedBy", fields: [authorizedBy], references: [id])

    @@map("visitor_logs")
}

enum VisitorStatus {
    PENDING // Esperando autorización
    APPROVED // Aprobado, puede ingresar
    IN_PROPERTY // Actualmente en la propiedad
    COMPLETED // Visita completada
    REJECTED // Rechazado
    EXPIRED // Autorización expirada
}

model KeyManagement {
    id         String  @id @default(cuid())
    propertyId String
    unitId     String?
    assignedTo String? // ID del usuario asignado

    // Información de la llave
    keyCode     String  @unique // Código único de la llave
    keyType     KeyType
    description String? // Descripción adicional de la llave
    location    String? // Ubicación física de la cerradura

    // Control de estado
    status     KeyStatus @default(ACTIVE)
    issuedDate DateTime  @default(now())
    returnDate DateTime? // Fecha cuando se devuelve la llave

    // Historial y seguridad
    accessLog    Json? // Log de accesos con esta llave
    restrictions Json? // Restricciones de uso (horarios, áreas)
    emergencyKey Boolean @default(false) // Si es llave de emergencia

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    property     Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    unit         Unit?    @relation("UnitKeys", fields: [unitId], references: [id], onDelete: SetNull)
    assignedUser User?    @relation("AssignedTo", fields: [assignedTo], references: [id], onDelete: SetNull)

    @@map("key_management")
}

enum KeyType {
    PHYSICAL // Llave física tradicional
    DIGITAL // Llave digital/tarjeta
    MASTER // Llave maestra
    EMERGENCY // Llave de emergencia
    TEMPORARY // Llave temporal
    MAINTENANCE // Llave para mantenimiento
}

enum KeyStatus {
    ACTIVE // Activa y en uso
    INACTIVE // Inactiva temporalmente
    LOST // Reportada como perdida
    STOLEN // Reportada como robada
    REPLACED // Reemplazada por una nueva
    RETURNED // Devuelta
    DAMAGED // Dañada
}

// ========================================
// SISTEMA DE COMUNICACIÓN
// ========================================

model Message {
    id         String  @id @default(cuid())
    senderId   String
    receiverId String
    propertyId String? // Opcional: asociar mensaje a una propiedad específica

    // Contenido del mensaje
    subject  String
    content  String
    type     MessageType @default(GENERAL)
    priority Priority    @default(MEDIUM)

    // Archivos adjuntos
    attachments Json? // Array de URLs de archivos adjuntos

    // Control de estado
    status    MessageStatus @default(SENT)
    readAt    DateTime?
    repliedAt DateTime?

    // Programación de mensajes
    scheduledFor DateTime? // Para mensajes programados
    expiresAt    DateTime? // Para mensajes con vencimiento

    // Hilo de conversación
    parentMessageId String? // Para respuestas y hilos
    threadId        String? // ID del hilo de conversación

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Relations
    sender   User      @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
    receiver User      @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
    parent   Message?  @relation("MessageThread", fields: [parentMessageId], references: [id])
    replies  Message[] @relation("MessageThread")

    @@map("messages")
}

enum MessageType {
    GENERAL // Mensaje general
    MAINTENANCE_REQUEST // Solicitud de mantenimiento
    PAYMENT_REMINDER // Recordatorio de pago
    CONTRACT_NOTIFICATION // Notificación de contrato
    EMERGENCY // Mensaje de emergencia
    ANNOUNCEMENT // Anuncio general
    COMPLAINT // Queja o reclamo
    SUGGESTION // Sugerencia
    VISITOR_REQUEST // Solicitud de autorización de visitante
    KEY_REQUEST // Solicitud de llave
    SERVICE_NOTIFICATION // Notificación de servicios
}

enum MessageStatus {
    DRAFT // Borrador
    SENT // Enviado
    DELIVERED // Entregado
    READ // Leído
    REPLIED // Respondido
    ARCHIVED // Archivado
    DELETED // Eliminado
}

// ========================================
// COMUNICACIÓN INTERNA AVANZADA
// ========================================

model CommunicationLog {
    id         String  @id @default(cuid())
    propertyId String?

    // Información del evento de comunicación
    eventType     CommunicationEventType
    description   String
    involvedUsers Json // Array de IDs de usuarios involucrados

    // Detalles del evento
    eventData  Json? // Datos específicos del evento
    importance Priority @default(MEDIUM)

    // Seguimiento
    followUpRequired Boolean   @default(false)
    followUpDate     DateTime?
    resolution       String?
    resolvedAt       DateTime?
    resolvedBy       String? // ID del usuario que resolvió

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("communication_logs")
}

enum CommunicationEventType {
    MESSAGE_SENT
    NOTIFICATION_SENT
    EMERGENCY_ALERT
    MAINTENANCE_SCHEDULED
    PAYMENT_PROCESSED
    CONTRACT_SIGNED
    VISITOR_AUTHORIZED
    KEY_ISSUED
    COMPLAINT_FILED
    INCIDENT_REPORTED
    MEETING_SCHEDULED
    ANNOUNCEMENT_POSTED
}

// ========================================
// CONFIGURACIÓN AVANZADA DEL SISTEMA
// ========================================

model SystemConfiguration {
    id String @id @default(cuid())

    // Configuración global
    configKey   String         @unique
    configValue Json
    description String?
    category    ConfigCategory

    // Metadatos
    isActive        Boolean @default(true)
    isReadOnly      Boolean @default(false)
    validationRules Json? // Reglas de validación para el valor

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("system_configurations")
}

enum ConfigCategory {
    GENERAL
    SECURITY
    NOTIFICATIONS
    PAYMENTS
    MAINTENANCE
    COMMUNICATION
    REPORTS
    INTEGRATIONS
}
