// ========================================
// PROPERTY
// ========================================

model Property {
    id      String @id @default(cuid())
    adminId String

    // Basic info
    name        String
    description String?

    // Address
    street         String
    number         String
    city           String
    neighborhood   String
    state          String
    postalCode     String
    gpsCoordinates String? // Format: "lat,lng"
    country        String  @default("Colombia")

    // Features
    propertyType  PropertyType
    totalLandArea Float? // En m²
    builtArea     Float // En m²
    floors        Int          @default(1)
    age           Int

    // Exterior
    yardOrGarden         String?
    parking              Int     @default(0)
    parkingLocation      String?
    balconiesAndTerraces String?
    recreationalAreas    String?

    // Zonas comunes (optimizado como JSON)
    commonZones String? // JSON string con array de zonas comunes
    // Ejemplo: [{"name": "Piscina", "description": "...", "capacity": 20, "available": true, "openingTime": "06:00", "closingTime": "22:00", "adminId": "admin123"}]

    // Estado y disponibilidad
    status PropertyStatus @default(ACTIVE)

    // Relaciones
    admin Admin  @relation(fields: [adminId], references: [id], onDelete: Restrict)
    units Unit[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([adminId])
    @@index([city, neighborhood])
    @@index([propertyType])
    @@map("properties")
}

enum PropertyType {
    HOUSE
    BUILDING
    APARTMENT
    COMMERCIAL_SPACE
    OFFICE
    LAND
}

enum PropertyStatus {
    ACTIVE
    INACTIVE
    MAINTENANCE
    SOLD
}

// ========================================
// UNIT
// ========================================

model Unit {
    id String @id @default(cuid())

    propertyId String

    unitNumber String
    floor      Int?
    area       Float? // postgres @db.Decimal(8, 2)
    bedrooms   Int     @default(0)
    bathrooms  Float   @default(0) // postgres @db.Decimal(3, 1)
    furnished  Boolean @default(false)

    // Características detalladas
    balcony        Boolean @default(false)
    parking        Boolean @default(false)
    storage        Boolean @default(false)
    petFriendly    Boolean @default(false)
    smokingAllowed Boolean @default(false)

    // Servicios incluidos
    internet      Boolean @default(false)
    cableTV       Boolean @default(false)
    waterIncluded Boolean @default(false)
    gasIncluded   Boolean @default(false)

    status UnitStatus @default(VACANT)

    baseRent Float? // postgres @db.Decimal(10, 2)
    deposit  Float? // postgres @db.Decimal(10, 2)

    // Información adicional
    description String? // postgres @db.Text
    images      String // String[] // URLs de imágenes

    // Última inspección
    lastInspectionDate DateTime?

    property  Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    contracts Contract[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([propertyId, unitNumber])
    @@index([status])
    @@index([bedrooms, bathrooms]) // Para búsquedas
    @@index([baseRent]) // Para filtros de precio
    @@index([propertyId]) // Consultar unidades por propiedad
    @@index([floor]) // Consultas por nivel/piso
    @@index([furnished]) // Buscar amoblados
    @@index([petFriendly, smokingAllowed]) // Filtros para preferencias
    @@map("units")
}

enum UnitStatus {
    VACANT // Vacante
    OCCUPIED // Ocupada
    RESERVED // Reservada
    MAINTENANCE // En mantenimiento
    UNAVAILABLE // No disponible
}
