// ========================================
// USER - (Admin, Tenant)
// ========================================

model User {
    id String @id @default(cuid())

    // Autenticación
    email         String  @unique
    emailVerified Boolean @default(false)
    phone         String?
    phoneVerified Boolean @default(false)

    // Información personal
    name       String
    lastName   String
    birthDate  DateTime?
    birthPlace String?

    // Dirección
    address    String?
    city       String?
    state      String?
    country    String?
    postalCode String?

    documentType   DocumentType
    documentNumber String       @unique

    gender        Gender
    maritalStatus MaritalStatus
    profession    String?

    // Avatar/foto
    profileImage String?

    // Estado de la cuenta
    disable  Boolean @default(false)
    timezone String  @default("America/Bogota")
    language String  @default("es") // Idioma preferido

    // Configuraciones de notificaciones
    emailNotifications Boolean @default(true)
    smsNotifications   Boolean @default(false)

    // Campos de auditoría
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    lastLoginAt DateTime?

    admin  Admin?
    tenant Tenant?

    additionalContracts Contract[] @relation("AdditionalResidents") // Contratos donde es residente adicional

    @@index([email])
    @@index([documentNumber])
    @@index([deletedAt])
    @@index([createdAt]) // Para orden cronológico de registros
    @@index([lastLoginAt]) // Para saber quién ha estado activo
    @@map("users")
}

enum DocumentType {
    CC // Cédula de Ciudadanía
    CE // Cédula de Extranjería
    TI // Tarjeta de Identidad
    PASSPORT // Pasaporte
    NIT // NIT para personas jurídicas
    OTHER // Otros documentos
}

enum Gender {
    MALE
    FEMALE
    OTHER
    PREFER_NOT_TO_SAY
}

enum MaritalStatus {
    SINGLE
    MARRIED
    DIVORCED
    WIDOWED // Viudo
    SEPARATED
    COMMON_LAW // Unión libre
}

model Admin {
    id         String     @id @default(cuid())
    userId     String     @unique
    adminLevel AdminLevel @default(STANDARD)

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdById String?
    createdBy   Admin?  @relation("AdminCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
    created     Admin[] @relation("AdminCreatedBy")

    // Relaciones mejoradas
    properties  Property[]
    commonZones CommonZone[]
    contracts   Contract[]   @relation("ContractAdmins")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([adminLevel])
    @@index([userId]) // Buscar admin por usuario
    @@index([createdById]) // Jerarquías: admins creados por otros
    @@map("admins")
}

enum AdminLevel {
    SUPER_ADMIN
    MANAGER
    STANDARD
    LIMITED
}

model Tenant {
    id     String @id @default(cuid())
    userId String @unique

    // Información específica del inquilino
    emergencyContact      String?
    emergencyContactPhone String?
    employmentStatus      String?
    monthlyIncome         Float?

    // Referencias
    references Reference[]

    user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    contracts Contract[] // Contratos donde es el inquilino

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId]) // Relación directa
    @@index([monthlyIncome]) // Para filtros económicos
    @@map("tenants")
}

model Reference {
    id       String @id @default(cuid())
    tenantId String

    name         String
    phone        String
    relationship String

    tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@map("references")
}
